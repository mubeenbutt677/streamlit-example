# -*- coding: utf-8 -*-
"""T&T Final Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aAhb4m5HnekMJBGfP6m3sRNB6KIKbEar
"""


import streamlit as st


from sklearn.model_selection import train_test_split

import pickle

from sklearn.linear_model import LogisticRegression

from sklearn.metrics import accuracy_score,precision_score, recall_score, f1_score, confusion_matrix

from sklearn.naive_bayes import GaussianNB

from sklearn.svm import SVC

from sklearn.ensemble import RandomForestClassifier

import pandas as pd

import matplotlib.pyplot as plt

import seaborn as sns


# Input fields for all columns
sex = st.selectbox("Select Sex:", df['sex'].unique())
age = st.number_input("Enter Age:", min_value=int(df['age'].min()), max_value=int(df['age'].max()), value=int(df['age'].mean()))
height = st.number_input("Enter Height:", min_value=int(df['height'].min()), max_value=int(df['height'].max()), value=int(df['height'].mean()))
weight = st.number_input("Enter Weight:", min_value=int(df['weight'].min()), max_value=int(df['weight'].max()), value=int(df['weight'].mean()))
waistline = st.number_input("Enter Waistline:", min_value=float(df['waistline'].min()), max_value=float(df['waistline'].max()), value=float(df['waistline'].mean()))
sight_left = st.number_input("Enter Sight Left:", min_value=float(df['sight_left'].min()), max_value=float(df['sight_left'].max()), value=float(df['sight_left'].mean()))
sight_right = st.number_input("Enter Sight Right:", min_value=float(df['sight_right'].min()), max_value=float(df['sight_right'].max()), value=float(df['sight_right'].mean()))
hear_left = st.number_input("Enter Hear Left:", min_value=float(df['hear_left'].min()), max_value=float(df['hear_left'].max()), value=float(df['hear_left'].mean()))
hear_right = st.number_input("Enter Hear Right:", min_value=float(df['hear_right'].min()), max_value=float(df['hear_right'].max()), value=float(df['hear_right'].mean()))
SBP = st.number_input("Enter SBP:", min_value=float(df['SBP'].min()), max_value=float(df['SBP'].max()), value=float(df['SBP'].mean()))
DBP = st.number_input("Enter DBP:", min_value=float(df['DBP'].min()), max_value=float(df['DBP'].max()), value=float(df['DBP'].mean()))
BLDS = st.number_input("Enter BLDS:", min_value=float(df['BLDS'].min()), max_value=float(df['BLDS'].max()), value=float(df['BLDS'].mean()))
tot_chole = st.number_input("Enter Total Cholesterol:", min_value=float(df['tot_chole'].min()), max_value=float(df['tot_chole'].max()), value=float(df['tot_chole'].mean()))
HDL_chole = st.number_input("Enter HDL Cholesterol:", min_value=float(df['HDL_chole'].min()), max_value=float(df['HDL_chole'].max()), value=float(df['HDL_chole'].mean()))
LDL_chole = st.number_input("Enter LDL Cholesterol:", min_value=float(df['LDL_chole'].min()), max_value=float(df['LDL_chole'].max()), value=float(df['LDL_chole'].mean()))
triglyceride = st.number_input("Enter Triglyceride:", min_value=float(df['triglyceride'].min()), max_value=float(df['triglyceride'].max()), value=float(df['triglyceride'].mean()))
hemoglobin = st.number_input("Enter Hemoglobin:", min_value=float(df['hemoglobin'].min()), max_value=float(df['hemoglobin'].max()), value=float(df['hemoglobin'].mean()))
urine_protein = st.number_input("Enter Urine Protein:", min_value=float(df['urine_protein'].min()), max_value=float(df['urine_protein'].max()), value=float(df['urine_protein'].mean()))
serum_creatinine = st.number_input("Enter Serum Creatinine:", min_value=float(df['serum_creatinine'].min()), max_value=float(df['serum_creatinine'].max()), value=float(df['serum_creatinine'].mean()))
SGOT_AST = st.number_input("Enter SGOT AST:", min_value=float(df['SGOT_AST'].min()), max_value=float(df['SGOT_AST'].max()), value=float(df['SGOT_AST'].mean()))
SGOT_ALT = st.number_input("Enter SGOT ALT:", min_value=float(df['SGOT_ALT'].min()), max_value=float(df['SGOT_ALT'].max()), value=float(df['SGOT_ALT'].mean()))
gamma_GTP = st.number_input("Enter Gamma GTP:", min_value=float(df['gamma_GTP'].min()), max_value=float(df['gamma_GTP'].max()), value=float(df['gamma_GTP'].mean()))
smoking_history = st.number_input("Enter Smoking History:", min_value=float(df['smoking_history'].min()), max_value=float(df['smoking_history'].max()), value=float(df['smoking_history'].mean()))
drinking_history = st.selectbox("Select Drinking History:", df['drinking_history'].unique())

# Button to trigger an action
button_clicked = st.button("Click me!")

# Output variables
st.write("Sex:", sex)
st.write("Age:", age)
st.write("Height:", height)
st.write("Weight:", weight)
st.write("Waistline:", waistline)
st.write("Sight Left:", sight_left)
st.write("Sight Right:", sight_right)
st.write("Hear Left:", hear_left)
st.write("Hear Right:", hear_right)
st.write("SBP:", SBP)
st.write("DBP:", DBP)
st.write("BLDS:", BLDS)
st.write("Total Cholesterol:", tot_chole)
st.write("HDL Cholesterol:", HDL_chole)
st.write("LDL Cholesterol:", LDL_chole)
st.write("Triglyceride:", triglyceride)
st.write("Hemoglobin:", hemoglobin)
st.write("Urine Protein:", urine_protein)
st.write("Serum Creatinine:", serum_creatinine)
st.write("SGOT AST:", SGOT_AST)
st.write("SGOT ALT:", SGOT_ALT)
st.write("Gamma GTP:", gamma_GTP)
st.write("Smoking History:", smoking_history)
st.write("Drinking History:", drinking_history)

if button_clicked:
    st.write("Button was clicked!")



data = pd.read_csv('D:/MSDS/T&T/smoking_driking_dataset_Ver01.csv')

X = data.iloc[:100000, 1:-1]

y = data.iloc[:100000, -1]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

df = data.iloc[:100000, :]

print(df.info())

print(df.head())

print(df.describe())

sns.countplot(x='DRK_YN', data=df)

plt.title('Class Distribution')

plt.show()

missing_values = df.isnull().sum()

print(missing_values)

mapping_dict = {'Y': 1, 'N': 0}

df['DRK_YN_MAPPED'] = df['DRK_YN'].map(mapping_dict)

for feature in df.columns[:-1]:

    sns.boxplot(x='DRK_YN_MAPPED', y=feature, data=df)

    plt.title(f'Box Plot of {feature} by Class')

    plt.show()

correlation_matrix = df.corr()

plt.figure(figsize=(12, 8))

sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")

plt.title('Correlation Matrix')

plt.show()

for feature in df.columns[:-1]:

    sns.boxplot(x='DRK_YN_MAPPED', y=feature, data=df)

    plt.title(f'Box Plot of {feature} by Class')

    plt.show()

for feature in df.columns[:-1]:

    sns.violinplot(x='DRK_YN_MAPPED', y=feature, data=df, inner='quartile')

    plt.title(f'Violin Plot of {feature} by Class')

    plt.show()

logreg_model = LogisticRegression()

logreg_model.fit(X_train, y_train)

y_pred = pd.Series(logreg_model.predict(X_test))

accuracy = accuracy_score(y_test, y_pred)

precision = precision_score(y_test, y_pred, pos_label="Y")

recall = recall_score(y_test, y_pred, pos_label="Y")

f1 = f1_score(y_test, y_pred , pos_label="Y")

cm = confusion_matrix(y_test, y_pred)

print(f"Logistic Regression Accuracy: {accuracy}")

print(f"Logistic Regression Precision: {precision}")

print(f"Logistic Regression Recall: {recall}")

print(f"Logistic Regression F1: {f1}")

plt.figure(figsize=(8, 6))

sns.heatmap(cm, annot=True, fmt="d", cmap="Blues", cbar=False)

plt.title('Confusion Matrix')

plt.xlabel('Predicted')

plt.ylabel('Actual')

plt.show()

naive_bayes_model = GaussianNB()

naive_bayes_model.fit(X_train, y_train)

y_pred = naive_bayes_model.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)

precision = precision_score(y_test, y_pred, pos_label="Y")

recall = recall_score(y_test, y_pred, pos_label="Y")

f1 = f1_score(y_test, y_pred , pos_label="Y")

cm = confusion_matrix(y_test, y_pred)

print(f"Naiye Bayes Accuracy: {accuracy}")

print(f"Naiye Bayes Precision: {precision}")

print(f"Naiye Bayes Recall: {recall}")

print(f"Naiye Bayes F1: {f1}")

plt.figure(figsize=(8, 6))

sns.heatmap(cm, annot=True, fmt="d", cmap="Blues", cbar=False)

plt.title('Confusion Matrix')

plt.xlabel('Predicted')

plt.ylabel('Actual')

plt.show()

random_forest_model = RandomForestClassifier()

random_forest_model.fit(X_train, y_train)

y_pred = random_forest_model.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)

precision = precision_score(y_test, y_pred, pos_label="Y")

recall = recall_score(y_test, y_pred, pos_label="Y")

f1 = f1_score(y_test, y_pred , pos_label="Y")

cm = confusion_matrix(y_test, y_pred)

print(f"Random Forest Accuracy: {accuracy}")

print(f"Random Forest Precision: {precision}")

print(f"Random Forest Recall: {recall}")

print(f"Random Forest F1: {f1}")

plt.figure(figsize=(8, 6))

sns.heatmap(cm, annot=True, fmt="d", cmap="Blues", cbar=False)

plt.title('Confusion Matrix')

plt.xlabel('Predicted')

plt.ylabel('Actual')

plt.show()

svm_model = SVC()

svm_model.fit(X_train, y_train)

y_pred = svm_model.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)

precision = precision_score(y_test, y_pred, pos_label="Y")

recall = recall_score(y_test, y_pred, pos_label="Y")

f1 = f1_score(y_test, y_pred , pos_label="Y")

cm = confusion_matrix(y_test, y_pred)

print(f"SVM Accuracy: {accuracy}")

print(f"SVM Precision: {precision}")

print(f"SVM Recall: {recall}")

print(f"SVM F1: {f1}")

plt.figure(figsize=(8, 6))

sns.heatmap(cm, annot=True, fmt="d", cmap="Blues", cbar=False)

plt.title('Confusion Matrix')

plt.xlabel('Predicted')

plt.ylabel('Actual')

plt.show()

with open('logreg_model.pkl', 'wb') as model_file:
    pickle.dump(logreg_model, model_file)

with open('naive_bayes_model.pkl', 'wb') as model_file:
    pickle.dump(naive_bayes_model, model_file)

with open('random_forest_model.pkl', 'wb') as model_file:
    pickle.dump(random_forest_model, model_file)

with open('svm_model.pkl', 'wb') as model_file:
    pickle.dump(svm_model, model_file)

with open('svm_model.pkl', 'rb') as model_file:

    loaded_model = pickle.load(model_file)

predictions = loaded_model.predict(X_test)

accuracy = accuracy_score(y_test, predictions)

print(f"Accuracy: {accuracy}")
